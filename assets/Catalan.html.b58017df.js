import{_ as o,Q as c,z as i,A as l,a6 as a,X as s,C as e,T as t}from"./framework.9f8afd9b.js";const u="/images/Catalan/1.jpg",r="/images/Catalan/2.png",d="/images/Catalan/3.png",k="/images/Catalan/4.png",v={},m={href:"https://www.bilibili.com/video/BV1m44y1A7aK/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode.cn/problems/unique-binary-search-trees/",target:"_blank",rel:"noopener noreferrer"};function h(f,n){const p=c("ExternalLinkIcon");return i(),l("div",null,[n[2]||(n[2]=a('<h1 id="卡特兰数" tabindex="-1"><a class="header-anchor" href="#卡特兰数" aria-hidden="true">#</a> 卡特兰数</h1><blockquote><p>由一次面试算法题带来的巨大数学缺失</p></blockquote><h2 id="什么东西" tabindex="-1"><a class="header-anchor" href="#什么东西" aria-hidden="true">#</a> 什么东西？</h2><ul><li>组合数学的计数问题数列</li><li>神奇的数学规律</li></ul><h2 id="几何意义" tabindex="-1"><a class="header-anchor" href="#几何意义" aria-hidden="true">#</a> 几何意义</h2><p>简单来说，卡特兰数就是一个有规律的数列，在坐标图中可以表示为：从原点 <code>(0,0)</code> 出发，每次向 x 轴或者 y 轴正方向移动 1 个单位，直到到达<code>(n,n)</code>点，且在移动过程中不越过第一象限平分线的移动方案总数。</p><h2 id="推导" tabindex="-1"><a class="header-anchor" href="#推导" aria-hidden="true">#</a> 推导</h2>',7)),s("p",null,[s("a",m,[n[0]||(n[0]=e("B 站视频")),t(p)])]),n[3]||(n[3]=a('<h2 id="公式" tabindex="-1"><a class="header-anchor" href="#公式" aria-hidden="true">#</a> 公式</h2><h3 id="通项" tabindex="-1"><a class="header-anchor" href="#通项" aria-hidden="true">#</a> 通项</h3><p><img src="'+u+'" alt=""></p><h3 id="递推" tabindex="-1"><a class="header-anchor" href="#递推" aria-hidden="true">#</a> 递推</h3><p><img src="'+r+'" alt=""></p><h3 id="取模" tabindex="-1"><a class="header-anchor" href="#取模" aria-hidden="true">#</a> 取模</h3><p><img src="'+d+'" alt=""></p><h3 id="递推-规律" tabindex="-1"><a class="header-anchor" href="#递推-规律" aria-hidden="true">#</a> 递推（规律）</h3><p><img src="'+k+'" alt=""></p><h2 id="考点" tabindex="-1"><a class="header-anchor" href="#考点" aria-hidden="true">#</a> 考点</h2><h3 id="进出栈" tabindex="-1"><a class="header-anchor" href="#进出栈" aria-hidden="true">#</a> 进出栈</h3><p>设栈 S 的初始状态为空，元素 a,b,c,d,e 依次入栈，以下出栈序列有多少种可能性？</p><blockquote><p>注意：这个序列顺序是定的。</p></blockquote><p>重点：归纳法思考，由大及小。</p><p>我们这样去想，假设最终的出栈序列可能性用 f(n) 表示，其中 n 就是元素的个数。假设第 k 个数是最后出栈的数，那么：</p><ul><li>比它小的前 k- 1 个数，肯定已经完成了入栈，出栈操作。因为从逻辑顺序上来讲，它们无法压到下面去吧</li><li>比它大的后 n-k 个数，肯定已经完成了入栈，出栈操作。它们倒是可以压到 k 下面去，但假设 k 是最后一个出栈的，它们不能破坏掉假设，也必须提出出栈。</li></ul><p>现在，k 将原来的问题，划分为两个子问题<code>f(n-k)</code>和<code>　f(k-1)</code>,根据乘法原理，结果就是<code>f(n -k)*f(k -1)</code>。</p><p>k 的取值范围是 1 &lt;k&lt;n，再根据加法原理：</p><p><code>f(n)=∑f(n-k)xf(k-1)k-1</code></p><p>展开写就是：</p><p><code>f(n)=f(0)xf(n-1)+f(1)xf(n-2)+...+f(n-1)x f(0)</code></p><h3 id="排队问题" tabindex="-1"><a class="header-anchor" href="#排队问题" aria-hidden="true">#</a> 排队问题</h3><p>变种 (排队问题): 出栈入栈问题有许多的变种，比如 n 个人拿 5 元、n 个人拿 10 元买物品，物品 5 元，老板没零钱。</p><p>问有几种排队方式。熟悉栈的同学很容易就能把这个问题转换为栈。</p><p>值得注意的是，由于每个拿 5 元的人排队的次序不是固定的，所以最后求得的答案要 n!。 拿 10 元的人同理，所以还要 n!。 所以这种变种的最后答案为<code>h(n)*n!。</code></p><h3 id="二叉树构成" tabindex="-1"><a class="header-anchor" href="#二叉树构成" aria-hidden="true">#</a> 二叉树构成</h3>',26)),s("p",null,[s("a",b,[n[1]||(n[1]=e("96. n 个二叉搜索树")),t(p)])]),n[4]||(n[4]=a(`<h4 id="递推解法" tabindex="-1"><a class="header-anchor" href="#递推解法" aria-hidden="true">#</a> 递推解法</h4><blockquote><p>可以使用递推，但要注意精度损失！</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//由于精度损失导致的计算错误</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将结果四舍五入为整数</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="取模解法" tabindex="-1"><a class="header-anchor" href="#取模解法" aria-hidden="true">#</a> 取模解法</h4><blockquote><p>可以使用取模，但是会出现溢出</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//即使使用 long 类型在计算处理阶乘仍会出现溢出</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> n0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            n2 <span class="token operator">*=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                n0 <span class="token operator">=</span> n2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                n1 <span class="token operator">=</span> n2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n2<span class="token operator">/</span><span class="token punctuation">(</span>n1<span class="token operator">*</span>n0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span>
<span class="token comment">//使用 bigInterger 会出现极大的性能损失，还是推荐动态规划</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigInteger</span> n2 <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> n1 <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> n0 <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 正确更新 n2 的值</span>
            n2 <span class="token operator">=</span> n2<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                n0 <span class="token operator">=</span> n2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                n1 <span class="token operator">=</span> n2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 先计算 n1 乘以 n0 的结果，再用 n2 除以该结果</span>
        <span class="token keyword">return</span> n2<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>n0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动规解法" tabindex="-1"><a class="header-anchor" href="#动规解法" aria-hidden="true">#</a> 动规解法</h4><div class="language-jave line-numbers-mode" data-ext="jave"><pre class="language-jave"><code>class Solution {
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i &lt;= n; i++) {
            for (int j = 0; j &lt; i; j++) {
                dp[i] += dp[j] * dp[i - 1 - j];
            }
        }
        return dp[n];
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四连击" tabindex="-1"><a class="header-anchor" href="#四连击" aria-hidden="true">#</a> 四连击</h2><p>https://zhuanlan.zhihu.com/p/31317307 https://zhuanlan.zhihu.com/p/31526354 https://zhuanlan.zhihu.com/p/31585260 https://zhuanlan.zhihu.com/p/31050581</p>`,12))])}const w=o(v,[["render",h],["__file","Catalan.html.vue"]]);export{w as default};
